{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Dil99818/Transfer_learning01/blob/main/Part_1%20-%20Transfer_learning_Feature_Extraction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1muxbw4x8tNr",
        "outputId": "83951415-71c4-4d77-b5a1-0787db431115"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sun Mar 27 20:36:52 2022       \n",
            "+-----------------------------------------------------------------------------+\n",
            "| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n",
            "|-------------------------------+----------------------+----------------------+\n",
            "| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
            "| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n",
            "|                               |                      |               MIG M. |\n",
            "|===============================+======================+======================|\n",
            "|   0  Tesla K80           Off  | 00000000:00:04.0 Off |                    0 |\n",
            "| N/A   31C    P8    28W / 149W |      0MiB / 11441MiB |      0%      Default |\n",
            "|                               |                      |                  N/A |\n",
            "+-------------------------------+----------------------+----------------------+\n",
            "                                                                               \n",
            "+-----------------------------------------------------------------------------+\n",
            "| Processes:                                                                  |\n",
            "|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n",
            "|        ID   ID                                                   Usage      |\n",
            "|=============================================================================|\n",
            "|  No running processes found                                                 |\n",
            "+-----------------------------------------------------------------------------+\n"
          ]
        }
      ],
      "source": [
        "!nvidia-smi\n",
        "import tensorflow as tf\n",
        "import tensorflow_hub as hub\n",
        "from tensorflow.keras import layers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rXseT5b4DflH",
        "outputId": "8829b906-13f0-46cf-d53f-2979b26fcdf6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2022-03-27 20:36:55--  https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_10_percent.zip\n",
            "Resolving storage.googleapis.com (storage.googleapis.com)... 74.125.124.128, 172.217.212.128, 172.217.214.128, ...\n",
            "Connecting to storage.googleapis.com (storage.googleapis.com)|74.125.124.128|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 168546183 (161M) [application/zip]\n",
            "Saving to: ‘10_food_classes_10_percent.zip’\n",
            "\n",
            "10_food_classes_10_ 100%[===================>] 160.74M   201MB/s    in 0.8s    \n",
            "\n",
            "2022-03-27 20:36:56 (201 MB/s) - ‘10_food_classes_10_percent.zip’ saved [168546183/168546183]\n",
            "\n"
          ]
        }
      ],
      "source": [
        "import zipfile \n",
        "\n",
        "#Download Data\n",
        "!wget https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_10_percent.zip\n",
        "\n",
        "#unzip and download the file\n",
        "zip_ref= zipfile.ZipFile(\"10_food_classes_10_percent.zip\", 'r')\n",
        "zip_ref.extractall()\n",
        "zip_ref.close()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rkI5HDyjDsxQ",
        "outputId": "11a16c78-5524-4337-d482-0476d443a9b1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 2 directories and 0 image in '10_food_classes_10_percent'. \n",
            "There are 10 directories and 0 image in '10_food_classes_10_percent/test'. \n",
            "There are 0 directories and 250 image in '10_food_classes_10_percent/test/grilled_salmon'. \n",
            "There are 0 directories and 250 image in '10_food_classes_10_percent/test/ice_cream'. \n",
            "There are 0 directories and 250 image in '10_food_classes_10_percent/test/ramen'. \n",
            "There are 0 directories and 250 image in '10_food_classes_10_percent/test/pizza'. \n",
            "There are 0 directories and 250 image in '10_food_classes_10_percent/test/steak'. \n",
            "There are 0 directories and 250 image in '10_food_classes_10_percent/test/sushi'. \n",
            "There are 0 directories and 250 image in '10_food_classes_10_percent/test/fried_rice'. \n",
            "There are 0 directories and 250 image in '10_food_classes_10_percent/test/hamburger'. \n",
            "There are 0 directories and 250 image in '10_food_classes_10_percent/test/chicken_curry'. \n",
            "There are 0 directories and 250 image in '10_food_classes_10_percent/test/chicken_wings'. \n",
            "There are 10 directories and 0 image in '10_food_classes_10_percent/train'. \n",
            "There are 0 directories and 75 image in '10_food_classes_10_percent/train/grilled_salmon'. \n",
            "There are 0 directories and 75 image in '10_food_classes_10_percent/train/ice_cream'. \n",
            "There are 0 directories and 75 image in '10_food_classes_10_percent/train/ramen'. \n",
            "There are 0 directories and 75 image in '10_food_classes_10_percent/train/pizza'. \n",
            "There are 0 directories and 75 image in '10_food_classes_10_percent/train/steak'. \n",
            "There are 0 directories and 75 image in '10_food_classes_10_percent/train/sushi'. \n",
            "There are 0 directories and 75 image in '10_food_classes_10_percent/train/fried_rice'. \n",
            "There are 0 directories and 75 image in '10_food_classes_10_percent/train/hamburger'. \n",
            "There are 0 directories and 75 image in '10_food_classes_10_percent/train/chicken_curry'. \n",
            "There are 0 directories and 75 image in '10_food_classes_10_percent/train/chicken_wings'. \n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "\n",
        "for dirpath, dirname, filenames in os.walk(\"10_food_classes_10_percent\"):\n",
        "  print(f\"There are {len(dirname)} directories and {len(filenames)} image in '{dirpath}'. \")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8lI3mnJeQJ1L",
        "outputId": "8246649c-5335-4d70-b323-f14ae1e5b956"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 750 images belonging to 10 classes.\n",
            "Found 2500 images belonging to 10 classes.\n"
          ]
        }
      ],
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "train_dir= \"10_food_classes_10_percent/train/\"\n",
        "test_dir = \"10_food_classes_10_percent/test/\"\n",
        "\n",
        "train_datagen = ImageDataGenerator(rescale=1/255.)\n",
        "test_datagen  = ImageDataGenerator(rescale=1/255.)\n",
        "\n",
        "train_datagen_10_precent= train_datagen.flow_from_directory(train_dir,\n",
        "                                                            target_size= (224,224),\n",
        "                                                            batch_size=32,\n",
        "                                                            class_mode= \"categorical\")\n",
        "\n",
        "test_datagen = test_datagen.flow_from_directory(test_dir,\n",
        "                                                          target_size= (224,224),\n",
        "                                                          batch_size=32,\n",
        "                                                          class_mode=\"categorical\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QlDUL4MBQ9DI"
      },
      "outputs": [],
      "source": [
        "#Create TensorBoard Call_back\n",
        "import datetime\n",
        "def create_tensorboard_callback(dir_name, experiment_name):\n",
        "  log_dir= dir_name +  \"/ \" + experiment_name + \"/ \" + datetime.datetime.now().strftime(\"%Y%M%D - %H%M%S\")\n",
        "\n",
        "  tensorboard_callback = tf.keras.callbacks.TensorBoard(\n",
        "      log_dir=log_dir\n",
        "  )\n",
        "\n",
        "  print(f\"Saving TensorBoard log files to: {log_dir}\")\n",
        "  return tensorboard_callback"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9HcmuGAJsSJH"
      },
      "outputs": [],
      "source": [
        "#resnet 50 V2 feature vector \n",
        "resnet_url= \"https://tfhub.dev/google/imagenet/resnet_v2_50/feature_vector/4\"\n",
        "\n",
        "\n",
        "#efficientNetB0 Feature Vector \n",
        "efficientnet_url= \"https://tfhub.dev/tensorflow/efficientnet/b0/feature-vector/1\"\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3dWPUJiD6BCo"
      },
      "outputs": [],
      "source": [
        "def create_model(model_url, num_classes=10):\n",
        "\n",
        "  #download the pretrained model and save it as a keras layers\n",
        "  feature_extractor_layer = hub.KerasLayer(model_url,\n",
        "                                            trainable= False,\n",
        "                                            name=\"feature_extraction_layers\",\n",
        "                                            input_shape=(224,224,3))\n",
        "  \n",
        "  #Create a own model\n",
        "  model= tf.keras.Sequential([\n",
        "                             feature_extractor_layer,\n",
        "                             layers.Dense(num_classes,\n",
        "                                          activation= \"softmax\",\n",
        "                                          name=\"output_layers\")])\n",
        "  return model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-Srgb9UqyPwJ"
      },
      "outputs": [],
      "source": [
        "#Create the model\n",
        "resnet_model= create_model(resnet_url, num_classes= train_datagen_10_precent.num_classes)\n",
        "\n",
        "#Compile the model\n",
        "resnet_model.compile(loss= \"categorical_crossentropy\",\n",
        "                     optimizer=tf.keras.optimizers.Adam(),\n",
        "                     metrics= ['accuracy'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fDBaPjXS1hDi",
        "outputId": "85913d27-3668-4e7d-d599-4fcc9d796f9e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving TensorBoard log files to: tensorflow_hub/ resnet50V2/ 20223403/27/22 - 143410\n",
            "Epoch 1/5\n",
            "24/24 [==============================] - 39s 1s/step - loss: 1.9513 - accuracy: 0.3400 - val_loss: 1.2604 - val_accuracy: 0.6016\n",
            "Epoch 2/5\n",
            "24/24 [==============================] - 22s 961ms/step - loss: 0.9203 - accuracy: 0.7293 - val_loss: 0.8867 - val_accuracy: 0.7148\n",
            "Epoch 3/5\n",
            "24/24 [==============================] - 22s 926ms/step - loss: 0.6279 - accuracy: 0.8293 - val_loss: 0.7657 - val_accuracy: 0.7568\n",
            "Epoch 4/5\n",
            "24/24 [==============================] - 22s 923ms/step - loss: 0.4846 - accuracy: 0.8667 - val_loss: 0.7230 - val_accuracy: 0.7636\n",
            "Epoch 5/5\n",
            "24/24 [==============================] - 22s 924ms/step - loss: 0.3862 - accuracy: 0.9107 - val_loss: 0.6815 - val_accuracy: 0.7832\n"
          ]
        }
      ],
      "source": [
        "resnet_history = resnet_model.fit(train_datagen_10_precent,\n",
        "                                  epochs=5,\n",
        "                                  steps_per_epoch= len(train_datagen_10_precent),\n",
        "                                  validation_data= test_datagen,\n",
        "                                  validation_steps= len(test_datagen),\n",
        "                                  callbacks= [create_tensorboard_callback(dir_name=\"tensorflow_hub\",\n",
        "                                                                         experiment_name=\"resnet50V2\")])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "6bBfYDY6F8G4",
        "outputId": "5792e847-365e-48d4-9d4a-a0601261de0c"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "loss = resnet_history.history['loss']\n",
        "accuracy=resnet_history.history['accuracy']\n",
        "val_accuracy=resnet_history.history['val_accuracy']\n",
        "val_loss=resnet_history.history['val_loss']\n",
        "epochs=range(len(resnet_history.history['loss']))\n",
        "\n",
        "#plot loss(Training & Test)\n",
        "plt.plot(epochs, loss, label='Traning_loss')\n",
        "plt.plot(epochs, val_loss, label=\"val_loss\")\n",
        "plt.title('Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.legend()\n",
        "\n",
        "#plot Accuracy(Training & Test)\n",
        "plt.figure()\n",
        "plt.plot(epochs, accuracy, label=\"Accuracy\")\n",
        "plt.plot(epochs, val_accuracy, label=\"val_Accuracy\")\n",
        "plt.title(\"Accuracy\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.legend();\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tefvVQiYZQGd"
      },
      "outputs": [],
      "source": [
        "#Create a function for history_plot\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def plot_loss_accuracy(history):\n",
        "\n",
        "  loss = history.history['loss']\n",
        "  accuracy=history.history['accuracy']\n",
        "\n",
        "  val_accuracy=history.history['val_accuracy']\n",
        "  val_loss=history.history['val_loss']\n",
        "\n",
        "  epochs=range(len(history.history['loss']))\n",
        "\n",
        "  plt.plot(epochs, loss, label=\"Traning_loss\")\n",
        "  plt.plot(epochs, val_loss, label=\"Test_loss\")\n",
        "  plt.title(\"Loss\")\n",
        "  plt.xlabel(\"Epochs\")\n",
        "  plt.legend()\n",
        "\n",
        "  plt.figure()\n",
        "  plt.plot(epochs, accuracy, label=\"Traning_Accuracy\")\n",
        "  plt.plot(epochs, val_accuracy, label=\"Test_Accuracy\")\n",
        "  plt.title(\"Accuracy\")\n",
        "  plt.xlabel(\"Epochs\")\n",
        "  plt.legend();\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "kNh1xw06GYQb",
        "outputId": "4adeed02-f377-418b-d521-ca2ba20bda59"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plot_loss_accuracy(resnet_history)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JIabMfqSXfjU",
        "outputId": "66c26239-d853-4664-f967-38cf4bb511d3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " feature_extraction_layers (  (None, 2048)             23564800  \n",
            " KerasLayer)                                                     \n",
            "                                                                 \n",
            " output_layers (Dense)       (None, 10)                20490     \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 23,585,290\n",
            "Trainable params: 20,490\n",
            "Non-trainable params: 23,564,800\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "resnet_model.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nEksP476Zd2g",
        "outputId": "27f3de49-0fff-41be-9040-ea0dd9d1d4bd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving TensorBoard log files to: tensorflow_hub/ efficientnetB0/ 20223603/27/22 - 143652\n",
            "Epoch 1/7\n",
            "24/24 [==============================] - 33s 905ms/step - loss: 1.8802 - accuracy: 0.4187 - val_loss: 1.3121 - val_accuracy: 0.7280\n",
            "Epoch 2/7\n",
            "24/24 [==============================] - 19s 815ms/step - loss: 1.0758 - accuracy: 0.7627 - val_loss: 0.8787 - val_accuracy: 0.8180\n",
            "Epoch 3/7\n",
            "24/24 [==============================] - 19s 812ms/step - loss: 0.7662 - accuracy: 0.8373 - val_loss: 0.7058 - val_accuracy: 0.8432\n",
            "Epoch 4/7\n",
            "24/24 [==============================] - 19s 815ms/step - loss: 0.6145 - accuracy: 0.8640 - val_loss: 0.6164 - val_accuracy: 0.8540\n",
            "Epoch 5/7\n",
            "24/24 [==============================] - 19s 814ms/step - loss: 0.5196 - accuracy: 0.8853 - val_loss: 0.5643 - val_accuracy: 0.8604\n",
            "Epoch 6/7\n",
            "24/24 [==============================] - 19s 815ms/step - loss: 0.4510 - accuracy: 0.9080 - val_loss: 0.5233 - val_accuracy: 0.8656\n",
            "Epoch 7/7\n",
            "24/24 [==============================] - 19s 818ms/step - loss: 0.3966 - accuracy: 0.9227 - val_loss: 0.4985 - val_accuracy: 0.8696\n"
          ]
        }
      ],
      "source": [
        "feature_extarctor_layer= hub.KerasLayer(efficientnet_url,\n",
        "                                        trainable= False,\n",
        "                                        name='feature_extraction_layer',\n",
        "                                        input_shape=(224,224,3)) \n",
        "#Create the Model\n",
        "efficientnet= tf.keras.Sequential([\n",
        "                             feature_extarctor_layer,\n",
        "                             layers.Dense(10, activation=\"softmax\", name=\"output_layer\")])\n",
        "\n",
        "#Compile the model\n",
        "efficientnet.compile(loss= \"categorical_crossentropy\",\n",
        "               optimizer=tf.keras.optimizers.Adam(),\n",
        "               metrics=['accuracy'])\n",
        "#Fit the model\n",
        "efficientnet_history = efficientnet.fit(train_datagen_10_precent,\n",
        "           epochs=7,\n",
        "           steps_per_epoch=len(train_datagen_10_precent),\n",
        "           validation_data=test_datagen,\n",
        "           validation_steps=len(test_datagen),\n",
        "           callbacks= [create_tensorboard_callback(dir_name=\"tensorflow_hub\", experiment_name= \"efficientnetB0\")])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "LuPhsRP5T_1E",
        "outputId": "c6a070b6-b24d-405f-b3e2-0364b534440f"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plot_loss_accuracy(efficientnet_history)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PS3EbGOLpOJD",
        "outputId": "f278c10e-a69a-4787-c291-841e925e6b1c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " feature_extraction_layer (K  (None, 1280)             4049564   \n",
            " erasLayer)                                                      \n",
            "                                                                 \n",
            " output_layer (Dense)        (None, 10)                12810     \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 4,062,374\n",
            "Trainable params: 12,810\n",
            "Non-trainable params: 4,049,564\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "efficientnet.summary()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#upload TensorBoard dev records\n",
        "!tensorboard dev upload --logdir ./tensorflow_hub/ \\\n",
        "  --name \"EfficientNetB0 VS. RestNet50V2\"  \\\n",
        "  --description \"Comparing two differ TF Hub feature exteraction model architectures using 10% of training data\" \\\n",
        "  --one_shot\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x_F-hrvIvzM_",
        "outputId": "85550ef7-f637-45af-e981-fc01769d9f91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "***** TensorBoard Uploader *****\n",
            "\n",
            "This will list all experiments that you've uploaded to\n",
            "https://tensorboard.dev. TensorBoard.dev experiments are visible\n",
            "to everyone. Do not upload sensitive data.\n",
            "\n",
            "Your use of this service is subject to Google's Terms of Service\n",
            "<https://policies.google.com/terms> and Privacy Policy\n",
            "<https://policies.google.com/privacy>, and TensorBoard.dev's Terms of Service\n",
            "<https://tensorboard.dev/policy/terms/>.\n",
            "\n",
            "This notice will not be shown again while you are logged into the uploader.\n",
            "To log out, run `tensorboard dev auth revoke`.\n",
            "\n",
            "Continue? (yes/NO) yes\n",
            "\n",
            "Please visit this URL to authorize this application: https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=373649185512-8v619h5kft38l4456nm2dj4ubeqsrvh6.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email&state=G8J83snBTfpgexMX9kAwHKW8xEHFqk&prompt=consent&access_type=offline\n",
            "Enter the authorization code: 4/1AX4XfWi0_mBP4vTwJ3J_wbGBf5pMR0DI0tFk7xknIbxUE2TFjW0dlfncq3U\n",
            "\n",
            "No experiments. Use `tensorboard dev upload` to get started.\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "Transfer_learning_Feature Extraction",
      "provenance": [],
      "mount_file_id": "1NBfd9g1UCY5o_wdClXYaciBkcXwcyyfr",
      "authorship_tag": "ABX9TyMsvet1nUovNyJF6FWaKYCV",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}